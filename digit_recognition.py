# -*- coding: utf-8 -*-
"""digit recognition

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jKEz2l-3sASx8Wm3KN_wAukZLrWoat7K
"""

pip install tensorflow

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt

# Load dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Reshape and normalize data
x_train = x_train.reshape(-1, 28, 28, 1) / 255.0  # Normalize pixel values (0-1)
x_test = x_test.reshape(-1, 28, 28, 1) / 255.0

# Check the shape of data
print(f"Training data shape: {x_train.shape}, Testing data shape: {x_test.shape}")

# Plot some sample images
for i in range(5):
    plt.subplot(1, 5, i + 1)
    plt.imshow(x_train[i].reshape(28, 28), cmap="gray")
    plt.title(f"Label: {y_train[i]}")
    plt.axis("off")
plt.show()

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),  # Convolutional Layer
    MaxPooling2D((2, 2)),                                           # MaxPooling Layer
    Flatten(),                                                      # Flatten to 1D
    Dense(128, activation='relu'),                                  # Fully Connected Layer
    Dense(10, activation='softmax')                                 # Output Layer (10 classes)
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Display the model architecture
model.summary()

# Train the model
history = model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Evaluate on test data
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {test_acc * 100:.2f}%")

import numpy as np

# Make predictions
predictions = model.predict(x_test)

# Display predictions with corresponding images
for i in range(5):
    plt.imshow(x_test[i].reshape(28, 28), cmap="gray")
    plt.title(f"Prediction: {np.argmax(predictions[i])}")
    plt.axis("off")
    plt.show()

model.save("digit_recognition_model.h5")
print("Model saved as 'digit_recognition_model.h5'")

# Load the model
loaded_model = tf.keras.models.load_model("digit_recognition_model.h5")

# Predict using the loaded model
sample = x_test[0].reshape(1, 28, 28, 1)  # Reshape to match model input
prediction = loaded_model.predict(sample)
print(f"Predicted digit: {np.argmax(prediction)}")

